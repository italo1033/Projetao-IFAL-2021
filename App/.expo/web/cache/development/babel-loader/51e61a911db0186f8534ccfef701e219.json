{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { styles } from \"./style.js\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Input, Text } from 'react-native-elements';\nimport { RadioButton } from 'react-native-paper';\nexport function Cadastro(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      validationContato = _useState2[0],\n      setValidationContato = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      contato = _useState4[0],\n      setContato = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      email = _useState6[0],\n      setEmail = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errorEmail = _useState8[0],\n      setErrorEmail = _useState8[1];\n\n  var _React$useState = React.useState('first'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      cpf = _useState10[0],\n      setCpf = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      errorCpf = _useState12[0],\n      setErrorCpf = _useState12[1];\n\n  var _useState13 = useState(null),\n      _useState14 = _slicedToArray(_useState13, 2),\n      nome = _useState14[0],\n      setNome = _useState14[1];\n\n  var _useState15 = useState(null),\n      _useState16 = _slicedToArray(_useState15, 2),\n      errorNome = _useState16[0],\n      setErrorNome = _useState16[1];\n\n  var _useState17 = useState(null),\n      _useState18 = _slicedToArray(_useState17, 2),\n      CEP = _useState18[0],\n      setCEP = _useState18[1];\n\n  var _useState19 = useState(null),\n      _useState20 = _slicedToArray(_useState19, 2),\n      errorCEP = _useState20[0],\n      setErrorCEP = _useState20[1];\n\n  var validar = function validar() {\n    var error = false;\n    setValidationContato(null);\n    var regexContato = /^\\(\\d{2}\\) \\d{4,5}-\\d{4}$/gi;\n\n    if (!regexContato.test(contato)) {\n      setValidationContato(\"Preencha seu contato\");\n      error = true;\n    }\n\n    setErrorEmail(null);\n    var regexEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    if (!regexEmail.test(String(email).toLowerCase())) {\n      setErrorEmail(\"Preencha seu e-mail corretamente\");\n      error = true;\n    }\n\n    setErrorCpf(null);\n    var regexCPF = /^\\d{3}\\.\\d{3}\\.\\d{3}\\-\\d{2}$/;\n\n    if (!regexCPF.test(cpf)) {\n      setErrorCpf(\"Preencha seu CPF corretamente\");\n      error = true;\n    }\n\n    setErrorNome(null);\n    var regexNome = /[^a-zà-ú]/gi;\n\n    if (!regexNome.test(nome)) {\n      setErrorNome(\"Por favor preencha todos os campos\");\n      error = true;\n    }\n\n    setErrorCEP(null);\n    var regexCEP = /^\\d{5}-\\d{3}$/;\n\n    if (!regexCEP.test(CEP)) {\n      setErrorCEP(\"Preencha seu CEP corretamente\");\n      error = true;\n    }\n\n    return !error;\n  };\n\n  var salvarDados = function salvarDados() {\n    if (validar()) {\n      console.log(\"Salvou\");\n    }\n  };\n\n  return React.createElement(View, {\n    style: styles.isBackgroundGeneral\n  }, React.createElement(Text, null, \"Nome:\"), React.createElement(Input, {\n    keyboardType: \"default\",\n    placeholder: \"Maria dos Santos\",\n    onChangeText: function onChangeText(value) {\n      return setNome(value);\n    },\n    returnKeyType: \"done\",\n    errorMessage: errorNome\n  }), React.createElement(Text, null, \"CPF:\"), React.createElement(Input, {\n    keyboardType: \"number-pad\",\n    placeholder: \"142.832.344-24\",\n    onChangeText: function onChangeText(value) {\n      return setCpf(value);\n    },\n    returnKeyType: \"done\",\n    errorMessage: errorCpf\n  }), React.createElement(Text, null, \"CPF:\"), React.createElement(Input, {\n    keyboardType: \"number-pad\",\n    placeholder: \"00000-000\",\n    onChangeText: function onChangeText(value) {\n      return setCEP(value);\n    },\n    returnKeyType: \"done\",\n    errorMessage: errorCEP\n  }), React.createElement(Text, null, \"Contato:\"), React.createElement(Input, {\n    keyboardType: \"phone-pad\",\n    placeholder: \"(82)99999-9999\",\n    onChangeText: function onChangeText(value) {\n      setContato(value);\n      setValidationContato(null);\n    },\n    returnKeyType: \"done\",\n    errorMessage: validationContato\n  }), React.createElement(Text, null, \"Email:\"), React.createElement(Input, {\n    placeholder: \"receitas12@gmail.com\",\n    onChangeText: function onChangeText(value) {\n      setEmail(value);\n      setErrorEmail(null);\n    },\n    keyboardType: \"email-address\",\n    errorMessage: errorEmail\n  }), React.createElement(Text, null, \"sexo:\"), React.createElement(RadioButton.Group, {\n    onValueChange: function onValueChange(newValue) {\n      return setValue(newValue);\n    },\n    value: value\n  }, React.createElement(View, null, React.createElement(Text, null, \"Masculino\"), React.createElement(RadioButton, {\n    value: \"first\"\n  })), React.createElement(View, null, React.createElement(Text, null, \"Feminino\"), React.createElement(RadioButton, {\n    value: \"second\"\n  }))), React.createElement(Text, null, \"Complemento:\"), React.createElement(Input, {\n    keyboardType: \"default\",\n    placeholder: \"Complemento\",\n    returnKeyType: \"done\"\n  }), React.createElement(Text, null, \"Lagradouro:\"), React.createElement(Input, {\n    keyboardType: \"default\",\n    placeholder: \"Lagradouro\",\n    returnKeyType: \"done\"\n  }), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: function onPress() {\n      return salvarDados();\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"#fff\"\n    }\n  }, \" Cadastrar \")));\n}","map":{"version":3,"sources":["/home/italo/Projetao-IFAL-2021/App/src/Screens/Cadastro/index.js"],"names":["React","useState","styles","Input","Text","RadioButton","Cadastro","navigation","validationContato","setValidationContato","contato","setContato","email","setEmail","errorEmail","setErrorEmail","value","setValue","cpf","setCpf","errorCpf","setErrorCpf","nome","setNome","errorNome","setErrorNome","CEP","setCEP","errorCEP","setErrorCEP","validar","error","regexContato","test","regexEmail","String","toLowerCase","regexCPF","regexNome","regexCEP","salvarDados","console","log","isBackgroundGeneral","newValue","button","color"],"mappings":"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","sourcesContent":["import React, { useState }  from 'react';\nimport { styles } from './style.js';\nimport { TouchableOpacity, View } from 'react-native';\nimport { Input, Text } from 'react-native-elements';\nimport { RadioButton } from 'react-native-paper';\n\n\nexport function Cadastro({navigation}) {\n\n\n  //Contato\n  const [ validationContato, setValidationContato ] = useState(null);\n  const [ contato, setContato ] = useState(null);\n\n  //email\n  const [email, setEmail] = useState(null)\n  const [errorEmail, setErrorEmail] = useState(null)\n\n  //picker\n  const [value, setValue] = React.useState('first');\n\n  //CPF\n  const [cpf, setCpf] = useState(null)\n  const [errorCpf, setErrorCpf] = useState(null)\n\n  //Nome\n  const [nome, setNome] = useState(null)\n  const [errorNome, setErrorNome] = useState(null)\n\n  //CEP\n  const [CEP, setCEP] = useState(null)\n  const [errorCEP, setErrorCEP] = useState(null)\n\n\n\n\n  const validar = () => {\n    let error = false\n\n    // Validando Contato\n    setValidationContato(null)\n    const regexContato = /^\\(\\d{2}\\) \\d{4,5}-\\d{4}$/gi;\n    if(!regexContato.test(contato)) {\n      setValidationContato(\"Preencha seu contato\")\n      error = true\n    }\n\n    // Validando Email\n    setErrorEmail(null)\n    const regexEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    if (!regexEmail.test(String(email).toLowerCase())){\n      setErrorEmail(\"Preencha seu e-mail corretamente\")\n      error = true\n    }\n\n  // Validando CPF\n    setErrorCpf(null)\n    const regexCPF =/^\\d{3}\\.\\d{3}\\.\\d{3}\\-\\d{2}$/\n    if (!regexCPF.test(cpf)){\n      setErrorCpf(\"Preencha seu CPF corretamente\")\n      error = true\n    }\n    \n\n    // validando Nome\n    setErrorNome(null)\n    const regexNome= /[^a-zà-ú]/gi\n    if (!regexNome.test(nome)) {\n      setErrorNome(\"Por favor preencha todos os campos\")\n      error = true\n    }\n\n    \n    setErrorCEP(null)\n    const regexCEP = \t/^\\d{5}-\\d{3}$/\n    if (!regexCEP.test(CEP)){\n      setErrorCEP(\"Preencha seu CEP corretamente\")\n      error = true\n    }\n    \n\n    return !error\n  }\n\n  const salvarDados = () => {\n    if(validar()) {\n      console.log(\"Salvou\")\n    }\n  }\n\n\n  return (\n    <View style={styles.isBackgroundGeneral}>\n\n      {/* Italo */}\n      <Text>Nome:</Text>\n      <Input\n          keyboardType=\"default\" \n          placeholder=\"Maria dos Santos\" \n          onChangeText={value => setNome(value)}\n          returnKeyType=\"done\" \n          errorMessage={errorNome}\n      />\n\n      {/* Italo */}\n      <Text>CPF:</Text>\n      <Input \n          keyboardType=\"number-pad\" \n          placeholder=\"142.832.344-24\" \n          onChangeText={value => setCpf(value)}\n          returnKeyType=\"done\" \n          errorMessage={errorCpf}\n      />\n\n      {/* Alex */}\n      <Text>CPF:</Text>\n      <Input \n          keyboardType=\"number-pad\" \n          placeholder=\"00000-000\" \n          onChangeText={value => setCEP(value)}\n          returnKeyType=\"done\" \n          errorMessage={errorCEP}\n      />\n\n      {/*Lara Fernanda*/}\n      <Text>Contato:</Text>\n      <Input \n            keyboardType=\"phone-pad\" \n            placeholder=\"(82)99999-9999\" \n            onChangeText={value => {\n              setContato(value)\n              setValidationContato(null)\n            }}\n            returnKeyType=\"done\" \n            errorMessage={validationContato}\n      /> \n\n      {/*Kenysson*/}\n      <Text>Email:</Text>\n      <Input\n            placeholder=\"receitas12@gmail.com\"\n            onChangeText={value => {\n                setEmail(value)\n                setErrorEmail(null)\n            }}\n            keyboardType=\"email-address\"\n            errorMessage={errorEmail}        \n        />\n      \n      {/*Kenysson*/}\n      <Text>sexo:</Text>\n      <RadioButton.Group onValueChange={newValue => setValue(newValue)} value={value}>\n            <View>\n                  <Text>Masculino</Text>\n                  <RadioButton value=\"first\" />\n            </View>\n            <View>\n                  <Text>Feminino</Text>\n                  <RadioButton value=\"second\" />\n            </View>\n      </RadioButton.Group>\n\n      {/*Lara Fernanda*/}\n      <Text>Complemento:</Text>\n      <Input \n      keyboardType=\"default\" \n      placeholder=\"Complemento\" \n      returnKeyType=\"done\"/>\n\n      {/*Alex*/}\n      <Text>Lagradouro:</Text>\n      <Input \n      keyboardType=\"default\" \n      placeholder=\"Lagradouro\" \n      returnKeyType=\"done\"/>\n\n\n    <TouchableOpacity style={styles.button} onPress={() => salvarDados()}>\n        <Text style={{color:\"#fff\"}}> Cadastrar </Text>\n    </TouchableOpacity>\n    \n    </View>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}